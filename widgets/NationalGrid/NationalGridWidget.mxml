<?xml version="1.0" encoding="utf-8"?>
<!--
 | Version 10.2
 | Copyright 2008 Esri
 |
 | Licensed under the Apache License, Version 2.0 (the "License");
 | you may not use this file except in compliance with the License.
 | You may obtain a copy of the License at
 |
 |    http://www.apache.org/licenses/LICENSE-2.0
 |
 | Unless required by applicable law or agreed to in writing, software
 | distributed under the License is distributed on an "AS IS" BASIS,
 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 | See the License for the specific language governing permissions and
 | limitations under the License.
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"
				   layout="horizontal"
				   widgetConfigLoaded="init()">

	<fx:Script>

		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.events.MapEvent;
			import com.esri.ags.events.MapMouseEvent;
			import com.esri.ags.geod.CoordinateTransformation;
			import com.esri.ags.geod.GeographicCS;
			import com.esri.ags.geod.ProjectedCS;
			import com.esri.ags.geod.ReferencedCS;
			import com.esri.ags.geod.Utilities;
			import com.esri.ags.geod.geom.MoreUtils;
			import com.esri.ags.geod.proj.Mercator;
			import com.esri.ags.geod.view.MgrsLayer;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.grat.PatternLineSymbol;
			import com.esri.ags.grat.SimpleGraticuleLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.utils.WebMercatorUtil;
			import com.esri.agsx.geom.GeometryUtils;

			import mx.controls.Alert;
			import mx.utils.StringUtil;

			import widgets.NationalGrid.components.infopopupcontent;
			[Bindable]
			private var mgrsLayer:MgrsLayer;
			[Bindable]
			private var graticuleLayer:SimpleGraticuleLayer;
			[Bindable]
			private var mapLon:String = "0";
			[Bindable]
			private var mapLat:String = "0";

			[Bindable]
			private var mapDLon:String = "0";
			[Bindable]
			private var mapDLat:String = "0";

			[Bindable]
			private var mapDMLon:String = "0";
			[Bindable]
			private var mapDMLat:String = "0";

			[Bindable]
			private var mapNorth:String = "0";
			[Bindable]
			private var mapEast:String = "0";

			[Bindable]
			private var mgrs:String = "0";

			private var usngGraphics:GraphicsLayer;

			private var m_geogToProg:CoordinateTransformation;

			private var isAdded:Boolean=false;

			private var beforCloseStateMgrsLayer:Boolean=false;
			private var beforCloseStateGraticLayer:Boolean=false;

			private function mouseMoveHandler(event:MouseEvent):void
			{
				if (mgrsLayerCB.selected){
					const mapPoint:MapPoint = map.toMapFromStage(event.stageX, event.stageY);

					mapNorth = mapPoint.y.toFixed(0);
					mapEast = mapPoint.x.toFixed(0);
					var pt:Point = new Point(mapPoint.x, mapPoint.y);
					m_geogToProg.projectInverse(pt);
					mgrs = MoreUtils.getMGRSString(pt.y, pt.x);
					mapLon = Utilities.radiansToDMSString(pt.x*Math.PI/180);
					mapLat = Utilities.radiansToDMSString(pt.y*Math.PI/180);
					const geo:MapPoint = WebMercatorUtil.webMercatorToGeographic(mapPoint) as MapPoint;
					mapDMLon=formatDMM(geo.x);
					mapDMLat=formatDMM(geo.y);
					var str:String= StringUtil.substitute("{0} {1}",numberFormatter.format(geo.x),numberFormatter.format(geo.y));
					numberFormatter.precision =  "6";
					mapDLat=StringUtil.substitute("{1}",numberFormatter.format(geo.x),numberFormatter.format(geo.y));
					mapDLon=StringUtil.substitute("{0}",numberFormatter.format(geo.x),numberFormatter.format(geo.y));
				}
			}

			/**
			 *  @private
			 *  Conversion of lat long to DDMMmm.
			 */
			private static function formatDMM(decDeg:Number):String
			{
				var d:Number = Math.abs(decDeg);
				var deg:Number = Math.floor(d);
				d = d - deg;
				var min:Number = new Number((d * 60).toPrecision(4));
				
				if (min == 60)
				{
					deg++;
					min = 0;
				}
				var smin:String = min < 10 ? "0" + min + "' " : min + "' ";
				if(decDeg<0)
				{
					return "-"+deg + "\xB0 " + smin;
				}
				else
				{
					return deg + "\xB0 " + smin;
				}
			}
			private function init():void
			{
				m_geogToProg = new CoordinateTransformation();
				m_geogToProg.init(ProjectedCS.WebMercator.geographicCS, ProjectedCS.WebMercator)
				mgrsLayer = new MgrsLayer();
				mgrsLayer.geographicCS = GeographicCS.NAD83;
				mgrsLayer.map = map;
				mgrsLayer.cs = ReferencedCS.WebMercator;
				mgrsLayer.id="USNG grid"
				map.addLayer(mgrsLayer);
				isAdded=true;

				graticuleLayer = new  SimpleGraticuleLayer();
				map.addLayer(graticuleLayer);
				graticuleLayer.projection = Mercator.WebMercator;
				graticuleLayer.map = map;
				graticuleLayer.id="Lat/Lon grid";
				usngGraphics = new GraphicsLayer();
				usngGraphics.id = "USNG graphics";
				map.addLayer(usngGraphics);

				map.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				map.addEventListener(MapMouseEvent.MAP_CLICK,onMapClick)


				usngGraphics.symbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, 0xff0000,1,3);
				if (configXML)
				{
					var color:uint;
					var alpha:Number;
					var width:int;


					//graticule
					color = parse_uint(graticuleLayer.lineSymbol.color, configXML.graticule.line.color);
					alpha = parse_number(graticuleLayer.lineSymbol.alpha, configXML.graticule.line.alpha);
					width = parse_int(graticuleLayer.lineSymbol.width, configXML.graticule.line.width);
					var dashArray:Array = parse_intArray([12,3,2,3], configXML.graticule.line.dashArray);
					graticuleLayer.lineSymbol = new PatternLineSymbol(dashArray, color, alpha, width);
					graticuleLayer.fontColor = parse_uint(graticuleLayer.fontColor, configXML.graticule.text.color);
					graticuleLayer.fontBackgroundColor = parse_uint(graticuleLayer.fontBackgroundColor, configXML.graticule.text.backgroundColor);
					graticuleLayer.fontBorderColor = parse_uint(graticuleLayer.fontBorderColor, configXML.graticule.text.borderColor);
					graticuleLayer.fontSize = parse_int(graticuleLayer.fontSize, configXML.graticule.text.size);
					graticuleLayer.textTransparency = parse_number(graticuleLayer.textTransparency, configXML.graticule.text.alpha);
					graticuleLayer.fontBorder = parse_boolean(graticuleLayer.fontBorder, configXML.graticule.text.border);
					graticuleLayer.fontBackground = parse_boolean(graticuleLayer.fontBorder, configXML.graticule.text.background);
					graticuleLayer.m_numberOfGrids = parse_int(graticuleLayer.m_numberOfGrids, configXML.graticule.numberOfGrids);
					graticuleLayer.useDMM = parse_boolean(graticuleLayer.useDMM, configXML.graticule.useDMM);


					//utm
					mgrsLayer.maxUTMScale=parse_number(mgrsLayer.maxUTMScale, configXML.mgrsLayer.utm.maxscale);
					mgrsLayer.minUTMScale=parse_number(mgrsLayer.minUTMScale, configXML.mgrsLayer.utm.minscale);
					color = parse_uint(mgrsLayer.utmLineSymbol.color, configXML.mgrsLayer.utm.line.color);
					alpha = parse_number(mgrsLayer.utmLineSymbol.alpha, configXML.mgrsLayer.utm.line.alpha);
					width = parse_int(mgrsLayer.utmLineSymbol.width, configXML.mgrsLayer.utm.line.width);
					mgrsLayer.utmLineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, color, alpha, width);
					mgrsLayer.utmTextFormat.color = parse_uint(uint(mgrsLayer.utmTextFormat.color), configXML.mgrsLayer.utm.text.color);
					mgrsLayer.utmTextFormat.size = parse_int(Number(mgrsLayer.utmTextFormat.size), configXML.mgrsLayer.utm.text.size);
					mgrsLayer.utmTextFormat.italic = parse_boolean(mgrsLayer.utmTextFormat.italic, configXML.mgrsLayer.utm.text.italic);
					mgrsLayer.utmTextFormat.font = parse_string(mgrsLayer.utmTextFormat.font, configXML.mgrsLayer.utm.text.font);


					// mgrs
					mgrsLayer.maxMGRSScale = parse_number(mgrsLayer.maxMGRSScale, configXML.mgrsLayer.mgrs.maxscale);
					mgrsLayer.minMGRSScale = parse_number(mgrsLayer.minMGRSScale, configXML.mgrsLayer.mgrs.minscale);
					mgrsLayer.mgrsLineAlpha = parse_number(mgrsLayer.mgrsLineAlpha, configXML.mgrsLayer.mgrs.line.alpha);
					mgrsLayer.mgrsLineColor = parse_uint(mgrsLayer.mgrsLineColor, configXML.mgrsLayer.mgrs.line.color);
					mgrsLayer.mgrsLineWidth = parse_int(mgrsLayer.mgrsLineWidth, configXML.mgrsLayer.mgrs.line.width);
					mgrsLayer.mgrsTextFormat.color = parse_uint(uint(mgrsLayer.mgrsTextFormat.color), configXML.mgrsLayer.mgrs.text.color);
					mgrsLayer.mgrsTextFormat.size = parse_int(Number(mgrsLayer.mgrsTextFormat.size), configXML.mgrsLayer.mgrs.text.size);
					mgrsLayer.mgrsTextFormat.italic = parse_boolean(mgrsLayer.mgrsTextFormat.italic, configXML.mgrsLayer.mgrs.text.italic);
					mgrsLayer.mgrsTextFormat.font = parse_string(mgrsLayer.mgrsTextFormat.font, configXML.mgrsLayer.mgrs.text.font);

					// mgrs fine grid
					mgrsLayer.maxGridScale = parse_number(mgrsLayer.maxGridScale, configXML.mgrsLayer.mgrsFineGrid.maxscale);
					mgrsLayer.minGridScale = parse_number(mgrsLayer.minGridScale, configXML.mgrsLayer.mgrsFineGrid.minscale);
					mgrsLayer.gridLineAlpha = parse_number(mgrsLayer.gridLineAlpha, configXML.mgrsLayer.mgrsFineGrid.line.alpha);
					mgrsLayer.gridLineColor = parse_uint(mgrsLayer.gridLineColor, configXML.mgrsLayer.mgrsFineGrid.line.color);
					mgrsLayer.gridLineWidth = parse_int(mgrsLayer.gridLineWidth, configXML.mgrsLayer.mgrsFineGrid.line.width);
					mgrsLayer.mgrsGridFormat.color = parse_uint(uint(mgrsLayer.mgrsGridFormat.color), configXML.mgrsLayer.mgrsFineGrid.text.color);
					mgrsLayer.mgrsGridFormat.size = parse_int(Number(mgrsLayer.mgrsGridFormat.size), configXML.mgrsLayer.mgrsFineGrid.text.size);
					mgrsLayer.mgrsGridFormat.italic = parse_boolean(mgrsLayer.mgrsGridFormat.italic, configXML.mgrsLayer.mgrsFineGrid.text.italic);
					mgrsLayer.mgrsGridFormat.font = parse_string(mgrsLayer.mgrsGridFormat.font, configXML.mgrsLayer.mgrsFineGrid.text.font);
				}
				else
				{
					Alert.show('Config not found');
				}
			}






			private function parse_boolean(b:Boolean, s:String):Boolean
			{
				if (!s)
					return b;
				if (s == "true")
					return true;
				return false;
			}
			private function parse_number(n:Number, s:String):Number
			{
				if (!s)
					return n;
				return Number(s);
			}
			private function parse_uint(i:uint, s:String):uint
			{
				if (!s)
					return i;
				return uint(Number(s));
			}
			private function parse_int(i:int, s:String):int
			{
				if (!s)
					return i;
				return int(Number(s));
			}
			private function parse_string(s1:String, s2:String):String
			{
				if (!s2)
					return s1;
				return s2;
			}

			private function parse_intArray(a:Array, s:String):Array
			{
				if (!s)
					return a;

				var sArray:Array = s.split(",");
				var answer:Array = new Array(sArray.length);
				for (var i:int=0;i<sArray.length;i++){
					answer[i] = Number(sArray[i]);
				}
				return answer;
			}

			private function removeSpaces(str:String):String
			{
				var myPattern:RegExp = / /g;
				return str.replace(myPattern, "");
			}
			private function goTo(event:MouseEvent):void
			{
				goTo2();

			}
			private var timer:Timer;

			private function goTo2():void
			{
				try{
					usngGraphics.clear();

				timer=new Timer(700,1);
					cursorManager.setBusyCursor()
					timer.addEventListener(TimerEvent.TIMER_COMPLETE,complete);
					timer.start();

					function complete(event:TimerEvent):void
					{


					var resultF:Boolean=false;
					if(usngGoTo.text!='' && usngGoTo.text!='Enter USNG / MGRS Coordinates' )
					{
						var myPattern:RegExp = / /g;
						var str:String = usngGoTo.text.replace(myPattern, "");
						var pline:Polyline = MoreUtils.MGRS_To_Polyline(str, mgrsLayer.geographicCS,map);
						if(pline)
						{
						var mappt:MapPoint=pline.paths[0][0] as MapPoint;
						if( !isNaN(mappt.x) && !isNaN(mappt.y)   )
						{
							if (pline){
								var geogToProg:CoordinateTransformation = new CoordinateTransformation();
								geogToProg.init(ProjectedCS.WebMercator.geographicCS, ProjectedCS.WebMercator)
								pline = geogToProg.projectPolyline(pline, false);//false is for forward, true would be inverse

								if (pline){
									resultF=true;
									usngGraphics.clear();



									usngGraphics.add(new Graphic(pline));


											 var ext:Extent = GeometryUtils.calculatePolylineExtent(pline);
											 map.extent = ext;


											 cursorManager.removeBusyCursor();
										}



							}
						}
						else
						{
							cursorManager.removeBusyCursor();
							Alert.show('Please enter valid USNG / MGRS coordinates.','Error');
						}
						}
						else
						{
							cursorManager.removeBusyCursor();
							Alert.show('Please enter valid USNG / MGRS coordinates.','Error');

						}
					}
					else
					{
						cursorManager.removeBusyCursor();
						Alert.show('Please enter USNG / MGRS coordinates.','Error');
					}
				}
				}
				catch (error:ArgumentError)
				{
					cursorManager.removeBusyCursor();
					trace('here')

				}
				catch(error:Error)
				{
					cursorManager.removeBusyCursor();
					trace('here2')
					Alert.show('Please enter valid USNG / MGRS coordinates.','Error');
				}



			}

			private function changeMGRSLayer():void
			{
				mgrsLayer.visible = !mgrsLayer.visible;
				if(map.infoWindow)
					map.infoWindow.hide()
			}
			private function changeGraticuleLayer():void
			{
				graticuleLayer.visible = !graticuleLayer.visible;

			}
			private function onMapClick(e:MapMouseEvent):void{

				if (mgrsLayerCB.selected)
				{
					const mapPoint:MapPoint = e.mapPoint as MapPoint;
					mapNorth = mapPoint.y.toFixed(0);
					mapEast = mapPoint.x.toFixed(0);
					var pt:Point = new Point(mapPoint.x, mapPoint.y);
					m_geogToProg.projectInverse(pt);
					mgrs = MoreUtils.getMGRSString(pt.y, pt.x);
					mapLon = Utilities.radiansToDMSString(pt.x*Math.PI/180);
					mapLat = Utilities.radiansToDMSString(pt.y*Math.PI/180);
					var contentUi:infopopupcontent= new infopopupcontent();

					contentUi.mapLat=mapLat;
					contentUi.mapLng=mapLon;
					contentUi.north=mapNorth
					contentUi.east=mapEast;
					contentUi.mapLatDeg=mapDLat;
					contentUi.mapLngDeg=mapDLon;
					contentUi.mapLatDegMin=mapDMLat;
					contentUi.mapLngDegMin=mapDMLon; 
					contentUi.mgrs=mgrs;
					map.infoWindow.label='';
					map.infoWindow.labelVisible=false;
					map.infoWindow.content= contentUi;
					map.infoWindow.closeButtonVisible=true;
					map.infoWindow.closeButton.toolTip = "Close";
					map.infoWindow.show(mapPoint);
				}
			}

			protected function widgettemplate1_closedHandler(event:Event):void
			{
				map.infoWindow.hide();
				isAdded=false;
				usngGraphics.visible=false;
				map.removeEventListener(MapMouseEvent.MAP_CLICK,onMapClick);
				beforCloseStateGraticLayer=graticuleLayerCB.selected;
				beforCloseStateMgrsLayer=mgrsLayerCB.selected;
				graticuleLayer.visible=false;
				mgrsLayer.visible=false;


			}

			protected function widgettemplate1_openHandler(event:Event):void
			{
				wTemplate.minimizeButton.toolTip="Minimize"
				wTemplate.closeButton.toolTip="Close"
				if(isAdded==false)
				{

					map.addEventListener(MapMouseEvent.MAP_CLICK,onMapClick)
				}
				if(graticuleLayer!=null && mgrsLayer!=null){
					if(beforCloseStateGraticLayer==true)
						graticuleLayer.visible=true;
					else
						graticuleLayer.visible=false;
					if(beforCloseStateMgrsLayer==true)
						mgrsLayer.visible=true
					else
						mgrsLayer.visible=false
				}
				if(usngGraphics!=null)
					usngGraphics.visible=true;
			}



			protected function widgettemplate1_minimizedHandler(event:Event):void
			{
				beforCloseStateGraticLayer=graticuleLayerCB.selected;
				beforCloseStateMgrsLayer=mgrsLayerCB.selected;
			}



			protected function usngGoTo_focusOutHandler(event:FocusEvent):void
			{
				if( usngGoTo.text=="")
				{
				usngGoTo.text="Enter USNG / MGRS Coordinates"
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:NumberFormatter id="numberFormatter"/>
	</fx:Declarations>
	<viewer:WidgetTemplate id="wTemplate" width="420" minWidth="420" height="275"  minHeight="275" minimized="widgettemplate1_minimizedHandler(event)" open="widgettemplate1_openHandler(event)" closed="widgettemplate1_closedHandler(event)">
		<s:VGroup width="100%" paddingTop="15">
			<s:HGroup>
				<mx:CheckBox id="graticuleLayerCB" label="Show Lat / Long Grid" change="changeGraticuleLayer()" selected="{graticuleLayer.visible}"/>
				<mx:CheckBox id="mgrsLayerCB" label="Show National Grid" change="changeMGRSLayer()" selected="{mgrsLayer.visible}"/>
			</s:HGroup>
			<s:HGroup paddingBottom="15" paddingTop="10">

				<mx:Grid>
					<mx:GridRow >
						<mx:GridItem >
							<s:Label color="0xffffff" text="Latitude(DMS):" visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" id="latLabel" text="{mapLat}" visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" text="Longitude(DMS):" visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" id="lonLabel" text="{mapLon}" visible = "true"/>
						</mx:GridItem>
					</mx:GridRow>
					<mx:GridRow>
						<mx:GridItem >
							<s:Label color="0xffffff" text="Latitude(DD):" visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" id="latDLabel" text="{mapDLat.toString()}" visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" text="Longitude(DD):" visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" id="lonDLabel" text="{mapDLon.toString()}" visible = "true"/>
						</mx:GridItem>
					</mx:GridRow>
					<mx:GridRow>
						<mx:GridItem >
							<s:Label color="0xffffff" text="Latitude(DMM):" visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" id="latDMLabel" text="{mapDMLat.toString()}" visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" text="Longitude(DMM):" visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" id="lonDMLabel" text="{mapDMLon.toString()}" visible = "true"/>
						</mx:GridItem>
					</mx:GridRow>
					<mx:GridRow>
						<mx:GridItem >
							<s:Label color="0xffffff" text="Northing : " visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" id="yLabel" text="{mapNorth}" visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" text="Easting : " visible="true"/>
						</mx:GridItem>
						<mx:GridItem >
							<s:Label color="0xffffff" id="xLabel" text="{mapEast}" visible = "true"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>

			</s:HGroup>
			<s:Label color="0xffffff" id="mgrsLabel" text="USNG / MGRS: {mgrs}" visible="true"/>
			<s:HGroup paddingTop="15">
				<s:Button label="Go to (USNG / MGRS)" click="goTo(event)"/>
				<s:TextInput height="24" width="200" maxChars="15"  id="usngGoTo"  click="if (usngGoTo.text=='Enter USNG / MGRS Coordinates') usngGoTo.text=''" focusOut="usngGoTo_focusOutHandler(event)"
							 text="Enter USNG / MGRS Coordinates"  enter="goTo2()"/>
			</s:HGroup>
			<s:Label color="0xffffff" text="Try 18SUJ23480647 for the Washington Monument."/>

		</s:VGroup>
	</viewer:WidgetTemplate>

</viewer:BaseWidget>
